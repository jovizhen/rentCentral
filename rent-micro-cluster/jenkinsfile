node {
   def mvnHome
   def app
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/jovizhen/rentCentral/'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'M3'
   }
   stage('Build Maven') {
      // Run the maven build
      if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' -f rent-micro-cluster/pom.xml -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('Results') {
      archive 'target/*.jar'
   }


   
    stage('Build images') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        sh "mkdir -p target"
        sh "cp rent-micro-cluster/echo-service/target/echo-service.jar ./target/"
        sh "cp rent-micro-cluster/echo-service/Dockerfile ./"
        app = docker.build("echo-service")
        sh "cp rent-micro-cluster/eureka-server/target/eureka-server.jar ./target/"
        sh "cp rent-micro-cluster/eureka-server/Dockerfile ./"
        app = docker.build("eureka-server")
        sh "cp rent-micro-cluster/zuul-server/target/zuul-server.jar ./target/"
        sh "cp rent-micro-cluster/zuul-server/Dockerfile ./"
        app = docker.build("zuul-server")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused.
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        } */
    }
}